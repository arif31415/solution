#include <bits/stdc++.h>
#include <boost/multiprecision/cpp_int.hpp>
namespace mp = boost::multiprecision;
using namespace std;
int power(int x, unsigned int y)
{
    int temp;
    if (y == 0)
        return 1;
    temp = power(x, y / 2);
    if (y % 2 == 0)
        return temp * temp;
    else
        return x * temp * temp;
}

int main() {
ios_base::sync_with_stdio(false);
cin.tie(NULL);
int t, m, k;
cin >> t;
mp::cpp_int factorial = 1;
    vector<mp::cpp_int> a;
    a.push_back(1);
    a.push_back(1);
    for (int i = 2; i <= 100; ++i) {
        factorial *= i;
        a.push_back(factorial);
    }
while (t--)
{
    mp::cpp_int ans = 0;
    mp::cpp_int n;
    cin >> n;
    int i = 1;
    while(a[i] < n){
        i++;
    }
    if(a[i] > n){
        i--;
    }
    if(n == 1){ans = 1;}
    else if(n < 7){ans = 2;}
    else{
        if(n - a[i] == 0){
            for(int j = 3; j < i; j++){
                ans += 2*a[j];
            }
            ans += 3;
        }
        else{
            for(int j = 3; j < i; j++){
                ans += 2*a[j];
            }
            ans += 4 + a[i];
        }
    }
    cout << ans << '\n';
}
return 0;
}




